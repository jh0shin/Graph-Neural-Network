       #!/usr/bin/env python3
       ###
       # test code from https://baeseongsu.github.io/posts/pytorch-geometric-introduction/
       ###
       
>>>>>> import torch
>>>>>> import torch.nn.functional as F
>>>>>> from torch_geometric.nn import GCNConv
>>>>>> from torch_geometric.datasets import Planetoid
       
>>>>>> import sys
>>>>>> import trace
       
>>>>>> def main():
    1:     dataset = Planetoid(root='/tmp/Cora', name='Cora')
       
    2:     class Net(torch.nn.Module):
    1:         def __init__(self):
    1:             super(Net, self).__init__()
    1:             self.conv1 = GCNConv(dataset.num_node_features, 16)
    1:             self.conv2 = GCNConv(16, dataset.num_classes)
       
    1:         def forward(self, data):
    2:             x, edge_index = data.x, data.edge_index
       
    2:             x = self.conv1(x, edge_index)
    2:             x = F.relu(x)
    2:             x = F.dropout(x, training=self.training)
    2:             x = self.conv2(x, edge_index)
       
    2:             return F.log_softmax(x, dim=1)
       
    1:     device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    1:     model = Net().to(device)
    1:     data = dataset[0].to(device)
    1:     optimizer = torch.optim.Adam(model.parameters(), lr=0.01, weight_decay=5e-4)
       
    1:     model.train()
    2:     for epoch in range(1):
    1:         optimizer.zero_grad()
    1:         out = model(data)
    1:         loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask])
    1:         loss.backward()
    1:         optimizer.step()
       
    1:     model.eval()
    1:     _, pred = model(data).max(dim=1)
    1:     correct = float (pred[data.test_mask].eq(data.y[data.test_mask]).sum().item())
    1:     acc = correct / data.test_mask.sum().item()
    1:     print('Accuracy: {:.4f}'.format(acc))
       
       # create a Trace object, telling it what to ignore, and whether to
       # do tracing or line-counting or both.
>>>>>> tracer = trace.Trace(
>>>>>>     ignoredirs=[sys.prefix, sys.exec_prefix],
>>>>>>     trace=0,
>>>>>>     count=1)
       
       # run the new command using the given tracer
>>>>>> tracer.run('main()')
       
       # make a report, placing output in the current directory
>>>>>> r = tracer.results()
>>>>>> r.write_results(show_missing=True, coverdir="./trace")
