>>>>>> import re
>>>>>> import inspect
>>>>>> from collections import OrderedDict
>>>>>> from typing import Dict, List, Any, Optional, Callable, Set
       
>>>>>> from .typing import parse_types
       
       
>>>>>> class Inspector(object):
>>>>>>     def __init__(self, base_class: Any):
    2:         self.base_class: Any = base_class
    2:         self.params: Dict[str, Dict[str, Any]] = {}
       
>>>>>>     def inspect(self, func: Callable,
>>>>>>                 pop_first: bool = False) -> Dict[str, Any]:
    8:         params = inspect.signature(func).parameters
    8:         params = OrderedDict(params)
    8:         if pop_first:
    6:             params.popitem(last=False)
    8:         self.params[func.__name__] = params
       
>>>>>>     def keys(self, func_names: Optional[List[str]] = None) -> Set[str]:
    4:         keys = []
   14:         for func in func_names or list(self.params.keys()):
   10:             keys += self.params[func].keys()
    4:         return set(keys)
       
>>>>>>     def __implements__(self, cls, func_name: str) -> bool:
    2:         if cls.__name__ == 'MessagePassing':
>>>>>>             return False
    2:         if func_name in cls.__dict__.keys():
    2:             return True
>>>>>>         return any(self.__implements__(c, func_name) for c in cls.__bases__)
       
>>>>>>     def implements(self, func_name: str) -> bool:
    2:         return self.__implements__(self.base_class.__class__, func_name)
       
>>>>>>     def types(self, func_names: Optional[List[str]] = None) -> Dict[str, str]:
>>>>>>         out: Dict[str, str] = {}
>>>>>>         for func_name in func_names or list(self.params.keys()):
>>>>>>             func = getattr(self.base_class, func_name)
>>>>>>             arg_types = parse_types(func)[0][0]
>>>>>>             for key in self.params[func_name].keys():
>>>>>>                 if key in out and out[key] != arg_types[key]:
>>>>>>                     raise ValueError(
>>>>>>                         (f'Found inconsistent types for argument {key}. '
                                f'Expected type {out[key]} but found type '
                                f'{arg_types[key]}.'))
>>>>>>                 out[key] = arg_types[key]
>>>>>>         return out
       
>>>>>>     def distribute(self, func_name, kwargs: Dict[str, Any]):
   12:         out = {}
   32:         for key, param in self.params[func_name].items():
   20:             data = kwargs.get(key, inspect.Parameter.empty)
   20:             if data is inspect.Parameter.empty:
>>>>>>                 if param.default is inspect.Parameter.empty:
>>>>>>                     raise TypeError(f'Required parameter {key} is empty.')
>>>>>>                 data = param.default
   20:             out[key] = data
   12:         return out
       
       
>>>>>> def func_header_repr(func: Callable, keep_annotation: bool = True) -> str:
>>>>>>     source = inspect.getsource(func)
>>>>>>     signature = inspect.signature(func)
       
>>>>>>     if keep_annotation:
>>>>>>         return ''.join(re.split(r'(\).*?:.*?\n)', source,
>>>>>>                                 maxsplit=1)[:2]).strip()
       
>>>>>>     params_repr = ['self']
>>>>>>     for param in signature.parameters.values():
>>>>>>         params_repr.append(param.name)
>>>>>>         if param.default is not inspect.Parameter.empty:
>>>>>>             params_repr[-1] += f'={param.default}'
       
>>>>>>     return f'def {func.__name__}({", ".join(params_repr)}):'
       
       
>>>>>> def func_body_repr(func: Callable, keep_annotation: bool = True) -> str:
>>>>>>     source = inspect.getsource(func)
>>>>>>     body_repr = re.split(r'\).*?:.*?\n', source, maxsplit=1)[1]
>>>>>>     if not keep_annotation:
>>>>>>         body_repr = re.sub(r'\s*# type:.*\n', '', body_repr)
>>>>>>     return body_repr
